{"ast":null,"code":"// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in production bundle\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs, you can use `nanoid/non-secure`. ' + 'For secure ID install `expo-random` locally and use `nanoid/async`.');\n  }\n  if (typeof self === 'undefined' || !self.crypto && !self.msCrypto) {\n    throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');\n  }\n}\nvar crypto = self.crypto || self.msCrypto;\n\n// This alphabet uses a-z A-Z 0-9 _- symbols.\n// Symbols are generated for smaller size.\n// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA\nvar url = '-_';\n// Loop from 36 to 0 (from z to a and 9 to 0 in Base36).\nvar i = 36;\nwhile (i--) {\n  // 36 is radix. Number.prototype.toString(36) returns number\n  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.\n  url += i.toString(36);\n}\n// Loop from 36 to 10 (from Z to A in Base36).\ni = 36;\nwhile (i-- - 10) {\n  url += i.toString(36).toUpperCase();\n}\nmodule.exports = function (size) {\n  var id = '';\n  var bytes = crypto.getRandomValues(new Uint8Array(size || 21));\n  i = size || 21;\n\n  // Compact alternative for `for (var i = 0; i < size; i++)`\n  while (i--) {\n    // We can’t use bytes bigger than the alphabet. 63 is 00111111 bitmask.\n    // This mask reduces random byte 0-255 to 0-63 values.\n    // There is no need in `|| ''` and `* 1.6` hacks in here,\n    // because bitmask trim bytes exact to alphabet size.\n    id += url[bytes[i] & 63];\n  }\n  return id;\n};","map":{"version":3,"names":["process","env","NODE_ENV","navigator","product","Error","self","crypto","msCrypto","url","i","toString","toUpperCase","module","exports","size","id","bytes","getRandomValues","Uint8Array"],"sources":["/home/zanegoodman/Springboard/CAPSTONES/CAPSTONE_2/node_modules/nanoid/index.browser.js"],"sourcesContent":["// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in production bundle\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n      'If you don’t need unpredictable IDs, you can use `nanoid/non-secure`. ' +\n      'For secure ID install `expo-random` locally and use `nanoid/async`.'\n    )\n  }\n  if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n      'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nvar crypto = self.crypto || self.msCrypto\n\n// This alphabet uses a-z A-Z 0-9 _- symbols.\n// Symbols are generated for smaller size.\n// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA\nvar url = '-_'\n// Loop from 36 to 0 (from z to a and 9 to 0 in Base36).\nvar i = 36\nwhile (i--) {\n  // 36 is radix. Number.prototype.toString(36) returns number\n  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.\n  url += i.toString(36)\n}\n// Loop from 36 to 10 (from Z to A in Base36).\ni = 36\nwhile (i-- - 10) {\n  url += i.toString(36).toUpperCase()\n}\n\nmodule.exports = function (size) {\n  var id = ''\n  var bytes = crypto.getRandomValues(new Uint8Array(size || 21))\n  i = size || 21\n\n  // Compact alternative for `for (var i = 0; i < size; i++)`\n  while (i--) {\n    // We can’t use bytes bigger than the alphabet. 63 is 00111111 bitmask.\n    // This mask reduces random byte 0-255 to 0-63 values.\n    // There is no need in `|| ''` and `* 1.6` hacks in here,\n    // because bitmask trim bytes exact to alphabet size.\n    id += url[bytes[i] & 63]\n  }\n  return id\n}\n"],"mappings":"AAAA;AACA;;AAEA,IAAIA,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzC;EACA,IAAI,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,CAACC,OAAO,KAAK,aAAa,EAAE;IAC3E,MAAM,IAAIC,KAAK,CACb,iEAAiE,GACjE,wEAAwE,GACxE,qEACF,CAAC;EACH;EACA,IAAI,OAAOC,IAAI,KAAK,WAAW,IAAK,CAACA,IAAI,CAACC,MAAM,IAAI,CAACD,IAAI,CAACE,QAAS,EAAE;IACnE,MAAM,IAAIH,KAAK,CACb,sDAAsD,GACtD,qEACF,CAAC;EACH;AACF;AAEA,IAAIE,MAAM,GAAGD,IAAI,CAACC,MAAM,IAAID,IAAI,CAACE,QAAQ;;AAEzC;AACA;AACA;AACA,IAAIC,GAAG,GAAG,IAAI;AACd;AACA,IAAIC,CAAC,GAAG,EAAE;AACV,OAAOA,CAAC,EAAE,EAAE;EACV;EACA;EACAD,GAAG,IAAIC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;AACvB;AACA;AACAD,CAAC,GAAG,EAAE;AACN,OAAOA,CAAC,EAAE,GAAG,EAAE,EAAE;EACfD,GAAG,IAAIC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;AACrC;AAEAC,MAAM,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAE;EAC/B,IAAIC,EAAE,GAAG,EAAE;EACX,IAAIC,KAAK,GAAGV,MAAM,CAACW,eAAe,CAAC,IAAIC,UAAU,CAACJ,IAAI,IAAI,EAAE,CAAC,CAAC;EAC9DL,CAAC,GAAGK,IAAI,IAAI,EAAE;;EAEd;EACA,OAAOL,CAAC,EAAE,EAAE;IACV;IACA;IACA;IACA;IACAM,EAAE,IAAIP,GAAG,CAACQ,KAAK,CAACP,CAAC,CAAC,GAAG,EAAE,CAAC;EAC1B;EACA,OAAOM,EAAE;AACX,CAAC"},"metadata":{},"sourceType":"script"}